package com.fundaro.zodiac.taurus.domain;

import static com.fundaro.zodiac.taurus.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PerformersAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPerformersAllPropertiesEquals(Performers expected, Performers actual) {
        assertPerformersAutoGeneratedPropertiesEquals(expected, actual);
        assertPerformersAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPerformersAllUpdatablePropertiesEquals(Performers expected, Performers actual) {
        assertPerformersUpdatableFieldsEquals(expected, actual);
        assertPerformersUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPerformersAutoGeneratedPropertiesEquals(Performers expected, Performers actual) {
        assertThat(expected)
            .as("Verify Performers auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPerformersUpdatableFieldsEquals(Performers expected, Performers actual) {
        assertThat(expected)
            .as("Verify Performers relevant properties")
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()))
            .satisfies(e -> assertThat(e.getInsertBy()).as("check insertBy").isEqualTo(actual.getInsertBy()))
            .satisfies(e ->
                assertThat(e.getInsertDate())
                    .as("check insertDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getInsertDate())
            )
            .satisfies(e -> assertThat(e.getEditBy()).as("check editBy").isEqualTo(actual.getEditBy()))
            .satisfies(e ->
                assertThat(e.getEditDate()).as("check editDate").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getEditDate())
            )
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPerformersUpdatableRelationshipsEquals(Performers expected, Performers actual) {
        assertThat(expected)
            .as("Verify Performers relationships")
            .satisfies(e -> assertThat(e.getInstrument()).as("check instrument").isEqualTo(actual.getInstrument()))
            .satisfies(e -> assertThat(e.getMedia()).as("check media").isEqualTo(actual.getMedia()));
    }
}

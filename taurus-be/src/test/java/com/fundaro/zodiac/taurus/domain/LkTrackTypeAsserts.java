package com.fundaro.zodiac.taurus.domain;

import static com.fundaro.zodiac.taurus.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class LkTrackTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLkTrackTypeAllPropertiesEquals(LkTrackType expected, LkTrackType actual) {
        assertLkTrackTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertLkTrackTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLkTrackTypeAllUpdatablePropertiesEquals(LkTrackType expected, LkTrackType actual) {
        assertLkTrackTypeUpdatableFieldsEquals(expected, actual);
        assertLkTrackTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLkTrackTypeAutoGeneratedPropertiesEquals(LkTrackType expected, LkTrackType actual) {
        assertThat(expected)
            .as("Verify LkTrackType auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLkTrackTypeUpdatableFieldsEquals(LkTrackType expected, LkTrackType actual) {
        assertThat(expected)
            .as("Verify LkTrackType relevant properties")
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()))
            .satisfies(e -> assertThat(e.getInsertBy()).as("check insertBy").isEqualTo(actual.getInsertBy()))
            .satisfies(e ->
                assertThat(e.getInsertDate())
                    .as("check insertDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getInsertDate())
            )
            .satisfies(e -> assertThat(e.getEditBy()).as("check editBy").isEqualTo(actual.getEditBy()))
            .satisfies(e ->
                assertThat(e.getEditDate()).as("check editDate").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getEditDate())
            )
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLkTrackTypeUpdatableRelationshipsEquals(LkTrackType expected, LkTrackType actual) {
        // empty method
    }
}
